import logging
import os
from telegram import Update, InputMediaAudio, File
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from telegram.error import TelegramError

# Replace with your bot's token
TOKEN = '8092513918:AAHoIInKH-nssfNbpqOjq_UHgEWZ5bwt_sg'

# Set up logging to track errors and bot activities
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to start the bot
def start(update: Update, context: CallbackContext) -> None:
    try:
        update.message.reply_text("Hello! I'm your music bot. Send me an audio file or a link to play music.")
    except TelegramError as e:
        logger.error(f"Error in start command: {e}")
        update.message.reply_text("An error occurred while processing your request. Please try again later.")

# Function to play an audio file
def play_music(update: Update, context: CallbackContext) -> None:
    try:
        audio = update.message.audio
        if audio:
            # Download audio
            audio_file = audio.get_file()
            file_path = f"{audio.file_id}.mp3"
            audio_file.download(file_path)

            # Send audio to the user
            update.message.reply_audio(open(file_path, 'rb'))

            # Clean up after sending the file
            os.remove(file_path)
        else:
            update.message.reply_text("Please send an audio file, not a link or other content.")
    except TelegramError as e:
        logger.error(f"TelegramError while processing audio: {e}")
        update.message.reply_text("There was an issue processing the audio file. Please try again.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        update.message.reply_text("An unexpected error occurred. Please try again later.")

# Function to handle invalid or unknown commands
def error(update: Update, context: CallbackContext) -> None:
    logger.warning(f"Update {update} caused error {context.error}")
    update.message.reply_text("Oops! Something went wrong. Please try again later.")

# Function to stop the bot
def stop(update: Update, context: CallbackContext) -> None:
    try:
        update.message.reply_text("Goodbye! See you next time.")
    except TelegramError as e:
        logger.error(f"Error in stop command: {e}")
        update.message.reply_text("An error occurred while stopping the bot. Please try again later.")

def main():
    # Create the Updater and pass in your bot's token
    updater = Updater(TOKEN)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Register command handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("stop", stop))

    # Register the message handler for audio files
    dispatcher.add_handler(MessageHandler(Filters.audio, play_music))

    # Register the error handler
    dispatcher.add_error_handler(error)

    # Start polling for updates from Telegram
    updater.start_polling()

    # Run the bot until you send a signal to stop
    updater.idle()

if __name__ == '__main__':
    main()
